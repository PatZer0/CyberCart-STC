C251 COMPILER V5.60.0,  host_comm                                                          04/05/24  19:33:46  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE host_comm
OBJECT MODULE PLACED IN .\Out_File\host_comm.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE Project\HAL\host_comm.c XSMALL INTR2 WARNINGLEVEL(3) OPTIMIZE(0,SPEED)
                    - BROWSE INCDIR(Libraries\libraries;Libraries\seekfree_libraries;Libraries\seekfree_peripheral;Project\CODE;Project\USER\
                    -inc;Project\USER\src;Libraries\seekfree_components;.\Project\HAL) DEBUG PRINT(.\Out_File\host_comm.lst) TABS(2) OBJECT(.
                    -\Out_File\host_comm.obj) 

stmt  level    source

    1          #include "headfile.h"
    2          #include "hal.h"
    3          
    4          #define HOST_COMM_BUFFER_SIZE 16
    5          
    6          unsigned char host_comm_tx_buffer[HOST_COMM_BUFFER_SIZE];
    7          
    8          bit     sendok = 0;
    9          bit     senderr = 0;
   10          bit     sendwrongcmd = 0;
   11          bit     sendwheelok = 0;
   12          bit     sendwheelwarnexceed = 0;
   13          
   14          // 内部使用的字符串转整数函数
   15          int internal_char_to_int(const char *str)
   16          {
   17   1          // 将字符串转化为整数
   18   1          int result = 0;  // 初始化结果为0
   19   1          int sign = 1;    // 符号标记，默认为正数
   20   1          int i = 0;
   21   1      
   22   1          // 检查是否为空字符串
   23   1          if (str[0] == '\0') 
   24   1          {
   25   2              return 0;
   26   2          }
   27   1      
   28   1          // 跳过前导空格（如果需要处理空格的情况）
   29   1          while (str[i] == ' ') 
   30   1          {
   31   2              i++;
   32   2          }
   33   1      
   34   1          // 检查符号
   35   1          if (str[i] == '-') 
   36   1          {
   37   2              sign = -1;   // 如果是负号，设置符号为负
   38   2              i++;         // 移动到下一个字符
   39   2          } else if (str[i] == '+') 
   40   1          {
   41   2              i++;         // 如果是正号，仅移动到下一个字符（sign保持为1）
   42   2          }
   43   1      
   44   1          // 遍历字符串直到遇到结束符'\0'
   45   1          while (str[i] != '\0') 
   46   1          {
   47   2              if (str[i] >= '0' && str[i] <= '9') {  // 确保字符是数字
   48   3                  result = result * 10 + (str[i] - '0');  // 将字符转换为相应的整数并加到结果中
   49   3              } else {
   50   3                  break; // 如果遇到非数字字符，停止解析
   51   3              }
   52   2              i++;
   53   2          }
   54   1          if(result > WHEEL_PWM_MAX_VAL)
   55   1          {
   56   2              result = WHEEL_PWM_MAX_VAL;
C251 COMPILER V5.60.0,  host_comm                                                          04/05/24  19:33:46  PAGE 2   

   57   2              sendwheelwarnexceed = 1; // 限幅到PWM最大值
   58   2          }
   59   1          return sign * result;  // 返回带有正确符号的结果
   60   1      }
   61          
   62          void host_comm_send_checksum_err()
   63          {
   64   1          senderr = 1;
   65   1      }
   66          
   67          void host_comm_uart_init(void)
   68          {
   69   1        // P_SW1 &= ~0xc0;            //UART1/USART1: RxD(P3.0), TxD(P3.1)
   70   1        // P_SW1 = (P_SW1 & ~0xc0) | 0x40;    //UART1/USART1: RxD(P3.6), TxD(P3.7)
   71   1          
   72   1          // 写入寄存器，设置串口1使用TIMER1，波特率921600
   73   1      
   74   1          SCON = 0x50;    //8位数据,可变波特率
   75   1        AUXR |= 0x40;   //定时器时钟1T模式
   76   1        AUXR &= 0xFE;   //串口1选择定时器1为波特率发生器
   77   1        TMOD &= 0x0F;   //设置定时器模式
   78   1        TL1 = 0xF7;     //设置定时初始值
   79   1        TH1 = 0xFF;     //设置定时初始值
   80   1        ET1 = 0;      //禁止定时器中断
   81   1        TR1 = 1;      //定时器1开始计时
   82   1        ES = 1;       //使能
   83   1      
   84   1          uart_sendstring(1, "STC32G12K128 READY. \r\n");
   85   1      }
   86          
   87          void host_comm_irqhandler()
   88          {
   89   1          unsigned int i;
   90   1          unsigned int oled_row;
   91   1          unsigned int oled_txt[64];
   92   1          unsigned char wheel_speed_buffer[7];
   93   1          int wheel_speed;
   94   1          unsigned char servo_angle_buffer[3];
   95   1          int servo_angle;
   96   1          unsigned char stepper_step_buffer[5];
   97   1          int stepper_step;
   98   1      
   99   1          // oled_p6x8str_spi(0, 1, uart1_rx_buffer);
  100   1      
  101   1          if ((uart1_rx_buffer[uart1_rx_counter] == '\n'))
  102   1          {
  103   2              // 接收到AT命令
  104   2              if ((uart1_rx_buffer[0] == 'A') && (uart1_rx_buffer[1] == 'T'))   
  105   2              {
  106   3                  led_1 = !led_1;
  107   3                  // 接收到SYS命令
  108   3                  if      ((uart1_rx_buffer[3] == 'S') && (uart1_rx_buffer[4] == 'Y') && (uart1_rx_buffer[5] ==
             - 'S'))
  109   3                  {
  110   4                      // 接收到SYS?命令
  111   4                      if(uart1_rx_buffer[6] == '?') sendok = 1;
  112   4                      else sendwrongcmd = 1;
  113   4                  }
  114   3                  // 接收到WHL命令
  115   3                  else if ((uart1_rx_buffer[3] == 'W') && (uart1_rx_buffer[4] == 'H') && (uart1_rx_buffer[5] ==
             - 'L'))
  116   3                  {
  117   4                      // 从Index10开始，写入缓冲区
  118   4                      for(i = 0; i < 7; i++)
  119   4                      {
  120   5                          // 检查到\r结束
C251 COMPILER V5.60.0,  host_comm                                                          04/05/24  19:33:46  PAGE 3   

  121   5                          if(uart1_rx_buffer[10+i] == '\r')
  122   5                          {
  123   6                              wheel_speed_buffer[i] = '\0';
  124   6                              break;
  125   6                          }
  126   5                          wheel_speed_buffer[i] = uart1_rx_buffer[10+i];
  127   5                      }
  128   4                      // 解析字符串
  129   4                      wheel_speed = internal_char_to_int(wheel_speed_buffer);
  130   4                      host_comm_send_data(wheel_speed_buffer);       // 调用host_comm_send_data()发送数据
  131   4                      // 解析速度结束，写入速度数据
  132   4                      if(uart1_rx_buffer[7] == 'X')
  133   4                      {
  134   5                          if(uart1_rx_buffer[8] == 'A')       // 设置所有轮子速度
  135   5                          {
  136   6                              wheel_x_front_speed = wheel_speed;
  137   6                              wheel_x_rear_speed = wheel_speed;
  138   6                              sendwheelok = 1;
  139   6                          }
  140   5                          else if(uart1_rx_buffer[8] == 'F')  // 设置前轮子速度
  141   5                          {
  142   6                              wheel_x_front_speed = wheel_speed;
  143   6                              sendwheelok = 1;
  144   6                          }
  145   5                          else if(uart1_rx_buffer[8] == 'R')  // 设置后轮子速度
  146   5                          {
  147   6                              wheel_x_rear_speed = wheel_speed;
  148   6                              sendwheelok = 1;
  149   6                          }
  150   5                          else sendwrongcmd = 1;
  151   5                      }
  152   4                      else if(uart1_rx_buffer[7] == 'Y')
  153   4                      {
  154   5                          if(uart1_rx_buffer[8] == 'A')       // 设置所有轮子速度
  155   5                          {
  156   6                              wheel_y_front_speed = wheel_speed;
  157   6                              wheel_y_rear_speed = wheel_speed;
  158   6                              sendwheelok = 1;
  159   6                          }
  160   5                          else if(uart1_rx_buffer[8] == 'F')  // 设置前轮子速度
  161   5                          {
  162   6                              wheel_y_front_speed = wheel_speed;
  163   6                              sendwheelok = 1;
  164   6                          }
  165   5                          else if(uart1_rx_buffer[8] == 'R')  // 设置后轮子速度
  166   5                          {
  167   6                              wheel_y_rear_speed = wheel_speed;
  168   6                              sendwheelok = 1;
  169   6                          }
  170   5                          else sendwrongcmd = 1;
  171   5                      }
  172   4                      else if(uart1_rx_buffer[7] == 'R' && uart1_rx_buffer[8] == 'R')
  173   4                      {
  174   5                          wheel_x_front_speed = -wheel_speed;
  175   5                          wheel_x_rear_speed = wheel_speed;
  176   5                          wheel_y_front_speed = wheel_speed;
  177   5                          wheel_y_rear_speed = -wheel_speed;
  178   5                          sendwheelok = 1;
  179   5                      }
  180   4                  }
  181   3                  // 接收到SVO命令
  182   3                  else if ((uart1_rx_buffer[3] == 'S') && (uart1_rx_buffer[4] == 'V') && (uart1_rx_buffer[5] ==
             - 'O'))
  183   3                  {
  184   4                      // AT+SVO+CLW=xxx   机械爪角度1-3位数
  185   4                      // AT+SVO+PTH=xxx   机械爪俯仰1-3位数
C251 COMPILER V5.60.0,  host_comm                                                          04/05/24  19:33:46  PAGE 4   

  186   4                      // AT+SVO+PAN=xxx   云台水平旋转1-3位数
  187   4                      // 从Index11开始，写入缓冲区
  188   4                      for(i = 0; i < 3; i++)
  189   4                      {
  190   5                          if(uart1_rx_buffer[11+i] == '\r')
  191   5                          {
  192   6                              servo_angle_buffer[i] = '\0';
  193   6                              break;
  194   6                          }
  195   5                          servo_angle_buffer[i] = uart1_rx_buffer[11+i];
  196   5                      }
  197   4                      // host_comm_send_data(servo_angle_buffer);       // 调用host_comm_send_data()发送数据
  198   4                      // 解析字符串
  199   4                      servo_angle = internal_char_to_int(servo_angle_buffer);
  200   4      
  201   4                      // 解析角度结束，写入角度数据
  202   4                      if(uart1_rx_buffer[7] == 'C' && uart1_rx_buffer[8] == 'L' && uart1_rx_buffer[9] == 'W')
  203   4                      {
  204   5                          servo_claw_set_angle(servo_angle);
  205   5                          sendok = 1;
  206   5                      }
  207   4                      else if(uart1_rx_buffer[7] == 'P' && uart1_rx_buffer[8] == 'T' && uart1_rx_buffer[9] == '
             -H')
  208   4                      {
  209   5                          servo_pitch_set_angle(servo_angle);
  210   5                          sendok = 1;
  211   5                      }
  212   4                      else if(uart1_rx_buffer[7] == 'P' && uart1_rx_buffer[8] == 'A' && uart1_rx_buffer[9] == '
             -N')
  213   4                      {
  214   5                          servo_pan_set_angle(servo_angle);
  215   5                          sendok = 1;
  216   5                      }
  217   4                      else sendwrongcmd = 1;
  218   4                  }
  219   3                  // 接收到STP命令
  220   3                  else if ((uart1_rx_buffer[3] == 'S') && (uart1_rx_buffer[4] == 'T') && (uart1_rx_buffer[5] ==
             - 'P'))
  221   3                  {
  222   4                      // AT+STP=+/-xxxx 步进电机步数
  223   4                      // 从Index7开始，写入缓冲区
  224   4                      for(i = 0; i < 5; i++)
  225   4                      {
  226   5                          if(uart1_rx_buffer[7+i] == '\r')
  227   5                          {
  228   6                              stepper_step_buffer[i] = '\0';
  229   6                              break;
  230   6                          }
  231   5                          stepper_step_buffer[i] = uart1_rx_buffer[7+i];
  232   5                      }
  233   4                      // 解析字符串
  234   4                      stepper_step = internal_char_to_int(stepper_step_buffer);
  235   4                      stepper_adjust(stepper_step);
  236   4                      sendok = 1;
  237   4                  }
  238   3                  else sendwrongcmd = 1;
  239   3              }
  240   2              else sendwrongcmd = 1;
  241   2          }
  242   1          else sendwrongcmd = 1;
  243   1      }
*** WARNING C47 IN LINE 90 OF Project\HAL\host_comm.c: 'oled_row': unreferenced local variable
*** WARNING C47 IN LINE 91 OF Project\HAL\host_comm.c: 'oled_txt': unreferenced local variable
  244          
  245          void host_comm_send_data(const char *buffer)
  246          {
C251 COMPILER V5.60.0,  host_comm                                                          04/05/24  19:33:46  PAGE 5   

  247   1          unsigned int i;
  248   1          for(i = 0; i < 64; i++)
  249   1          {
  250   2              host_comm_tx_buffer[i] = buffer[i];
  251   2          }
  252   1      }
  253          
  254          void host_comm_sender(void)
  255          {
  256   1          if(host_comm_tx_buffer != NULL)
  257   1          {
  258   2              uart_sendstring(1, host_comm_tx_buffer);
  259   2              host_comm_tx_buffer[0] = '\0';
  260   2          }
  261   1          // unsigned char host_comm_header = 0x90;
  262   1          if (sendok)
  263   1          {
  264   2              // uart_sendbyte(1, host_comm_header);
  265   2              uart_sendstring(1, "OK\r\n");
  266   2              sendok = 0;
  267   2              uart1_rx_counter = 0;
  268   2          }
  269   1          if (senderr)
  270   1          {
  271   2              // uart_sendbyte(1, host_comm_header);
  272   2              uart_sendstring(1, "ERROR\r\n");
  273   2              senderr = 0;
  274   2              uart1_rx_counter = 0;
  275   2          }
  276   1          if(sendwrongcmd)
  277   1          {
  278   2              // uart_sendbyte(1, host_comm_header);
  279   2              uart_sendstring(1, "ERROR:CMD\r\n");
  280   2              sendwrongcmd = 0;
  281   2              uart1_rx_counter = 0;
  282   2          }
  283   1          if(sendwheelok)
  284   1          {
  285   2              // uart_sendbyte(1, host_comm_header);
  286   2              uart_sendstring(1, "OK\r\n");
  287   2              sendwheelok = 0;
  288   2              uart1_rx_counter = 0;
  289   2          }
  290   1          if(sendwheelwarnexceed)
  291   1          {
  292   2              // uart_sendbyte(1, host_comm_header);
  293   2              uart_sendstring(1, "WARNING:WHEEL_SPEED_EXCEEDED\r\n");
  294   2              sendwheelwarnexceed = 0;
  295   2              uart1_rx_counter = 0;
  296   2          }
  297   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1493     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        55     ------
  bit size             =         5     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
C251 COMPILER V5.60.0,  host_comm                                                          04/05/24  19:33:46  PAGE 6   

  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        79     ------
End of Module Information.


C251 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
