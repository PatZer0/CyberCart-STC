C251 COMPILER V5.60.0,  laser_ranging                                                      10/04/24  20:12:07  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE laser_ranging
OBJECT MODULE PLACED IN .\Out_File\laser_ranging.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE Project\USER\src\laser_ranging.c XSMALL INTR2 WARNINGLEVEL(3) OPTIMIZE
                    -(0,SPEED) BROWSE INCDIR(Libraries\libraries;Libraries\seekfree_libraries;Libraries\seekfree_peripheral;Project\CODE;Proj
                    -ect\USER\inc;Project\USER\src;Libraries\seekfree_components) DEBUG PRINT(.\Out_File\laser_ranging.lst) TABS(2) OBJECT(.\
                    -Out_File\laser_ranging.obj) 

stmt  level    source

    1          /*
    2          ×¢Òâ£º  ÕâÊÇÊ¹ÓÃSEEKFREE¿âµÄ´®¿ÚÊµÏÖµÄ·ÖÖ§°æ±¾¡£
    3          */
    4          #include "headfile.h"
    5          #include "laser_ranging.h"
    6          #include "SEEKFREE_OLED.h"
    7          
    8          unsigned char laser_ranging_cmd_arr_single[]                = {0x80, 0x06, 0x02, 0x78};             // µ¥
             -´Î²âÁ¿
    9          unsigned char laser_ranging_cmd_arr_continous[]             = {0x80, 0x06, 0x03, 0x77};             // Á¬
             -Ðø²âÁ¿
   10          unsigned char laser_ranging_cmd_arr_shutdown[]              = {0x80, 0x04, 0x02, 0x7A};             // ¹Ø
             -»ú
   11          unsigned char laser_ranging_cmd_arr_setfreq_1hz[]           = {0xFA, 0x04, 0x0A, 0x00, 0xF8};       // Éè
             -ÖÃÆµÂÊ1hz
   12          unsigned char laser_ranging_cmd_arr_setfreq_5hz[]           = {0xFA, 0x04, 0x0A, 0x05, 0xF3};       // Éè
             -ÖÃÆµÂÊ5hz
   13          unsigned char laser_ranging_cmd_arr_setfreq_10hz[]          = {0xFA, 0x04, 0x0A, 0x0A, 0xEE};       // Éè
             -ÖÃÆµÂÊ10hz
   14          unsigned char laser_ranging_cmd_arr_setfreq_20hz[]          = {0xFA, 0x04, 0x0A, 0x14, 0xE4};       // Éè
             -ÖÃÆµÂÊ20hz
   15          unsigned char laser_ranging_cmd_arr_setrange_5m[]           = {0xFA, 0x04, 0x09, 0x05, 0xF4};       // Éè
             -ÖÃ¾àÀëÖµ5m
   16          unsigned char laser_ranging_cmd_arr_setrange_10m[]          = {0xFA, 0x04, 0x09, 0x0A, 0xEF};       // Éè
             -ÖÃ¾àÀëÖµ10m
   17          unsigned char laser_ranging_cmd_arr_setrange_30m[]          = {0xFA, 0x04, 0x09, 0x1E, 0xDB};       // Éè
             -ÖÃ¾àÀëÖµ30m
   18          unsigned char laser_ranging_cmd_arr_setrange_50m[]          = {0xFA, 0x04, 0x09, 0x32, 0xC7};       // Éè
             -ÖÃ¾àÀëÖµ50m
   19          unsigned char laser_ranging_cmd_arr_setrange_80m[]          = {0xFA, 0x04, 0x09, 0x50, 0xA9};       // Éè
             -ÖÃ¾àÀëÖµ80m
   20          unsigned char laser_ranging_cmd_arr_setresolution_1mm[]     = {0xFA, 0x04, 0x0C, 0x01, 0xF5};       // Éè
             -ÖÃ·Ö±æÂÊ1mm
   21          unsigned char laser_ranging_cmd_arr_setresolution_0_1mm[]   = {0xFA, 0x04, 0x0C, 0x02, 0xF4};       // Éè
             -ÖÃ·Ö±æÂÊ0.1mm
   22          unsigned char laser_ranging_cmd_arr_single_broadcast[]      = {0xFA, 0x06, 0x06, 0xFA};             // µ¥
             -´Î²âÁ¿£¨¹ã²¥£©
   23          unsigned char laser_ranging_cmd_arr_readcache[]             = {0x80, 0x06, 0x07, 0x73};             // ¶Á
             -È¡»º´æ
   24          unsigned char laser_ranging_cmd_arr_laseron[]               = {0x80, 0x06, 0x05, 0x01, 0x74};       // ¿Ø
             -ÖÆ¼¤¹â¿ªÆô
   25          unsigned char laser_ranging_cmd_arr_laseroff[]              = {0x80, 0x06, 0x05, 0x00, 0x75};       // ¿Ø
             -ÖÆ¼¤¹â¹Ø±Õ
   26          
   27          LASER_RANGING_CMD_DEF lrcmd_single              = {laser_ranging_cmd_arr_single,                sizeof(la
             -ser_ranging_cmd_arr_single) /                  sizeof(laser_ranging_cmd_arr_single[0])};
   28          LASER_RANGING_CMD_DEF lrcmd_continous           = {laser_ranging_cmd_arr_continous,             sizeof(la
             -ser_ranging_cmd_arr_continous) /               sizeof(laser_ranging_cmd_arr_continous[0])};
   29          LASER_RANGING_CMD_DEF lrcmd_shutdown            = {laser_ranging_cmd_arr_shutdown,              sizeof(la
             -ser_ranging_cmd_arr_shutdown) /                sizeof(laser_ranging_cmd_arr_shutdown[0])};
   30          LASER_RANGING_CMD_DEF lrcmd_setfreq_1hz         = {laser_ranging_cmd_arr_setfreq_1hz,           sizeof(la
             -ser_ranging_cmd_arr_setfreq_1hz) /             sizeof(laser_ranging_cmd_arr_setfreq_1hz[0])};
   31          LASER_RANGING_CMD_DEF lrcmd_setfreq_5hz         = {laser_ranging_cmd_arr_setfreq_5hz,           sizeof(la
             -ser_ranging_cmd_arr_setfreq_5hz) /             sizeof(laser_ranging_cmd_arr_setfreq_5hz[0])};
   32          LASER_RANGING_CMD_DEF lrcmd_setfreq_10hz        = {laser_ranging_cmd_arr_setfreq_10hz,          sizeof(la
             -ser_ranging_cmd_arr_setfreq_10hz) /            sizeof(laser_ranging_cmd_arr_setfreq_10hz[0])};
C251 COMPILER V5.60.0,  laser_ranging                                                      10/04/24  20:12:07  PAGE 2   

   33          LASER_RANGING_CMD_DEF lrcmd_setfreq_20hz        = {laser_ranging_cmd_arr_setfreq_20hz,          sizeof(la
             -ser_ranging_cmd_arr_setfreq_20hz) /            sizeof(laser_ranging_cmd_arr_setfreq_20hz[0])};
   34          LASER_RANGING_CMD_DEF lrcmd_setrange_5m         = {laser_ranging_cmd_arr_setrange_5m,           sizeof(la
             -ser_ranging_cmd_arr_setrange_5m) /             sizeof(laser_ranging_cmd_arr_setrange_5m[0])};
   35          LASER_RANGING_CMD_DEF lrcmd_setrange_10m        = {laser_ranging_cmd_arr_setrange_10m,          sizeof(la
             -ser_ranging_cmd_arr_setrange_10m) /            sizeof(laser_ranging_cmd_arr_setrange_10m[0])};
   36          LASER_RANGING_CMD_DEF lrcmd_setrange_30m        = {laser_ranging_cmd_arr_setrange_30m,          sizeof(la
             -ser_ranging_cmd_arr_setrange_30m) /            sizeof(laser_ranging_cmd_arr_setrange_30m[0])};
   37          LASER_RANGING_CMD_DEF lrcmd_setrange_50m        = {laser_ranging_cmd_arr_setrange_50m,          sizeof(la
             -ser_ranging_cmd_arr_setrange_50m) /            sizeof(laser_ranging_cmd_arr_setrange_50m[0])};
   38          LASER_RANGING_CMD_DEF lrcmd_setrange_80m        = {laser_ranging_cmd_arr_setrange_80m,          sizeof(la
             -ser_ranging_cmd_arr_setrange_80m) /            sizeof(laser_ranging_cmd_arr_setrange_80m[0])};
   39          LASER_RANGING_CMD_DEF lrcmd_setresolution_1mm   = {laser_ranging_cmd_arr_setresolution_1mm,     sizeof(la
             -ser_ranging_cmd_arr_setresolution_1mm) /       sizeof(laser_ranging_cmd_arr_setresolution_1mm[0])};
   40          LASER_RANGING_CMD_DEF lrcmd_setresolution_0_1mm = {laser_ranging_cmd_arr_setresolution_0_1mm,   sizeof(la
             -ser_ranging_cmd_arr_setresolution_0_1mm) /     sizeof(laser_ranging_cmd_arr_setresolution_0_1mm[0])};
   41          LASER_RANGING_CMD_DEF lrcmd_single_broadcast    = {laser_ranging_cmd_arr_single_broadcast,      sizeof(la
             -ser_ranging_cmd_arr_single_broadcast) /        sizeof(laser_ranging_cmd_arr_single_broadcast[0])};
   42          LASER_RANGING_CMD_DEF lrcmd_readcache           = {laser_ranging_cmd_arr_readcache,             sizeof(la
             -ser_ranging_cmd_arr_readcache) /               sizeof(laser_ranging_cmd_arr_readcache[0])};
   43          LASER_RANGING_CMD_DEF lrcmd_laseron             = {laser_ranging_cmd_arr_laseron,               sizeof(la
             -ser_ranging_cmd_arr_laseron) /                 sizeof(laser_ranging_cmd_arr_laseron[0])};
   44          LASER_RANGING_CMD_DEF lrcmd_laseroff            = {laser_ranging_cmd_arr_laseroff,              sizeof(la
             -ser_ranging_cmd_arr_laseroff) /                sizeof(laser_ranging_cmd_arr_laseroff[0])};
   45          
   46          LASER_RANGING_DATA_DEF lrdata;   // ´æ´¢²â¾àÖµ, µ÷ÓÃ·½·¨£ºlrdata.x/y.valuedata/chardata
   47          
   48          // void laser_ranging_irqhandler(unsigned char lr_axis)
   49          // {
   50          //     unsigned int i;
   51          //     switch (lr_axis)
   52          //     {
   53          //     case 'x':
   54          //             if (uart1_rx_buffer[0] == 0x80)
   55          //             {
   56          //                 if(uart1_rx_counter > 2)
   57          //                 {
   58          //                     if(uart1_rx_buffer[1] == 0x06 && uart1_rx_buffer[2] == 0x83)
   59          //                     {
   60          //                         if(uart1_rx_counter >= 11)
   61          //                         {
   62          //                             uart1_rx_counter=0;
   63          //                             if( (uart1_rx_buffer[3]<0x34) && (uart1_rx_buffer[3]!='E') && (uart1_rx_bu
             -ffer[4]!='R') && (uart1_rx_buffer[5]!='R') && (uart1_rx_buffer[10] == (unsigned char)(~(0x80+0x06+0x83+uart1_rx_buffer[3
             -]+uart1_rx_buffer[4]+uart1_rx_buffer[5]+0x2E+uart1_rx_buffer[7]+uart1_rx_buffer[8]+uart1_rx_buffer[9])+1)) ) 
   64          //                             {
   65          //                                 // laser_ranging_value = (uart1_rx_buffer[4]-0x30)*10000+(uart1_rx_buf
             -fer[5]-0x30)*1000 + (uart1_rx_buffer[7]-0x30)*100 + (uart1_rx_buffer[8]-0x30)*10 + (uart1_rx_buffer[9]-0x30);           
             -      
   66          //                                 // sprintf(laser_ranging_char, "%f", laser_ranging_value);
   67          //                                 // ½«uart1_rx_buffer[3]~uart1_rx_buffer[10]´æ´¢µ½laser_ranging_charÊý×
             -éÖÐ
   68          //                                 for(i=3;i<11;i++)
   69          //                                 {
   70          //                                     lrdata.x.chardata[i-3] = uart1_rx_buffer[i];
   71          //                                 }
   72          //                                 lrdata.x.valuedata = atof(lrdata.x.chardata);
   73          //                             }
   74          //                             else
   75          //                             {
   76          //                                 lrdata.x.valuedata = -1.0;
   77          //                                 lrdata.x.chardata[0] = 'E';
   78          //                                 lrdata.x.chardata[1] = 'R';
   79          //                                 lrdata.x.chardata[2] = 'R';
   80          //                             }
   81          //                         }
C251 COMPILER V5.60.0,  laser_ranging                                                      10/04/24  20:12:07  PAGE 3   

   82          //                     }
   83          //                 }
   84          //             }
   85          //         break;
   86          //     case 'y':
   87          //             if (uart2_rx_buffer[0] == 0x80)
   88          //             {
   89          //                 if(uart2_rx_counter > 2)
   90          //                 {
   91          //                     if(uart2_rx_buffer[1] == 0x06 && uart2_rx_buffer[2] == 0x83)
   92          //                     {
   93          //                         if(uart2_rx_counter >= 11)
   94          //                         {
   95          //                             uart2_rx_counter=0;
   96          
   97          //                             if( (uart2_rx_buffer[3]<0x34) && (uart2_rx_buffer[3]!='E') && (uart2_rx_bu
             -ffer[4]!='R') && (uart2_rx_buffer[5]!='R') && (uart2_rx_buffer[10] == (unsigned char)(~(0x80+0x06+0x83+uart2_rx_buffer[3
             -]+uart2_rx_buffer[4]+uart2_rx_buffer[5]+0x2E+uart2_rx_buffer[7]+uart2_rx_buffer[8]+uart2_rx_buffer[9])+1)) ) 
   98          //                             {
   99          //                                 // laser_ranging_value = (uart2_rx_buffer[4]-0x30)*10000+(uart2_rx_buf
             -fer[5]-0x30)*1000 + (uart2_rx_buffer[7]-0x30)*100 + (uart2_rx_buffer[8]-0x30)*10 + (uart2_rx_buffer[9]-0x30);           
             -      
  100          //                                 // sprintf(laser_ranging_char, "%f", laser_ranging_value);
  101          //                                 // ½«uart2_rx_buffer[3]~uart2_rx_buffer[10]´æ´¢µ½laser_ranging_charÊý×
             -éÖÐ
  102          //                                 for(i=3;i<11;i++)
  103          //                                 {
  104          //                                     lrdata.y.chardata[i-3+16] = uart2_rx_buffer[i];
  105          //                                 }
  106          //                                 lrdata.y.valuedata = atof(lrdata.y.chardata);
  107          //                             }
  108          //                             else
  109          //                             {
  110          //                                 lrdata.x.valuedata = -1.0;
  111          //                                 lrdata.x.chardata[0] = 'E';
  112          //                                 lrdata.x.chardata[1] = 'R';
  113          //                                 lrdata.x.chardata[2] = 'R';
  114          //                             }
  115          //                         }
  116          //                     }
  117          //                 }
  118          //             }
  119          //         break;
  120          //     default:
  121          //         break;
  122          //     }
  123          // }
  124          
  125          // ²ÎÊý£ºlr_axis ·½Ïò£¬'x'¡¢'y'¡¢'z'
  126          // ·µ»Ø£º¸÷¸ö·½Ïò¶¨ÒåµÄ¼¤¹â²â¾àUART´®¿ÚºÅ
  127          unsigned char laser_ranging_get_uart_value(unsigned char lr_axis)
  128          {
  129   1          switch (lr_axis)
  130   1          {
  131   2          case 'x':
  132   2              return 1;
  133   2              break;
  134   2          
  135   2          case 'y':
  136   2              return 2;
  137   2              break;
  138   2          
  139   2          case 'z':
  140   2              return 3;
  141   2              break;
  142   2          
C251 COMPILER V5.60.0,  laser_ranging                                                      10/04/24  20:12:07  PAGE 4   

  143   2          default:
  144   2              return 1;
  145   2              break;
  146   2          }
  147   1      }
  148          
  149          // ²ÎÊý£ºlr_axis ·½Ïò£¬'x'¡¢'y'¡¢'z'£» specific_cmd ÌØ¶¨ÃüÁî½á¹¹Ìå
  150          void laser_ranging(unsigned char lr_axis, LASER_RANGING_CMD_DEF *specific_cmd)
  151          {
  152   1          // uart_sendcmd(laser_ranging_get_uart_value(lr_axis), specific_cmd->command, specific_cmd->length);
  153   1          switch (lr_axis)
  154   1          {
  155   2          case 'x':
  156   2              uart_putbuff(UART_1, specific_cmd->command, specific_cmd->length);
  157   2              break;
  158   2          
  159   2          case 'y':
  160   2              uart_putbuff(UART_2, specific_cmd->command, specific_cmd->length);
  161   2              break;
  162   2          
  163   2          case 'z':
  164   2              uart_putbuff(UART_3, specific_cmd->command, specific_cmd->length);
  165   2              break;
  166   2          
  167   2          default:
  168   2              break;
  169   2          }
  170   1      }
  171          
  172          void laser_ranging_init()
  173          {
  174   1          laser_ranging('x', &lrcmd_setfreq_5hz);
  175   1          laser_ranging('x', &lrcmd_setrange_80m);
  176   1          laser_ranging('x', &lrcmd_setresolution_0_1mm);
  177   1          laser_ranging('y', &lrcmd_setfreq_5hz);
  178   1          laser_ranging('y', &lrcmd_setrange_80m);
  179   1          laser_ranging('y', &lrcmd_setresolution_0_1mm);
  180   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       212     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =       221     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       319     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
